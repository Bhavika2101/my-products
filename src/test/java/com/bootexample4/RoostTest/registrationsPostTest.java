// ********RoostGPT********
/*
Test generated by RoostGPT for test rest-assured-loader-testing using AI Type Open AI and AI Model gpt-4

Test generated for /recipients/persons/{id}/registrations_post for http method type POST in rest-assured framework

RoostTestHash=0973c499e9


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class registrationsPostTest {

    Map<String, String> envs = new HashMap<>();


    @Before
    public void setUp() {
      Dataloader envData = new Dataloader();
      String[] envVariableList = envData.getEnvVariableList("src" + File.separator + "test" + File.separator + "java" + File.separator + "com" + File.separator + "bootexample4" + File.separator + "RoostTest" + File.separator + "registrationsPostTest.csv");

      for (String envVar : envVariableList) {
        this.envs.put(envVar, "");
      }
      envData.loadData(envs);
    }


    
    @Test  
    public void registrationsPost_Test() {
        Dataloader csvData = new Dataloader();
        List<Map<String, String>> envVarsCSV = csvData.loadFromCSVFile("src" + File.separator + "test" + File.separator + "java" + File.separator + "com" + File.separator + "bootexample4" + File.separator + "RoostTest" + File.separator + "registrationsPostTest.csv");
        Map<String, String> envVars = new HashMap<>();
        for (Map<String, String> row : envVarsCSV) {
          envVars.putAll(envs);
          for (Map.Entry<String, String> entry : row.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            if (!value.equals("")) {
              envVars.put(key, value);
            }
          }  
          RestAssured.baseURI = System.getenv("BASE_URL");  
  
                Response response = given()
				.pathParam("id", map.get("id") != null ? map.get("id") : "")
				.contentType(ContentType.JSON)
				.body("{\n"+
					"  \"reference\": \"" + (map.get("reference") != null ? map.get("reference") : "") + "\",\n" +
					"  \"startDate\": \"" + (map.get("startDate") != null ? map.get("startDate") : "") + "\",\n" +
					"  \"endDate\": \"" + (map.get("endDate") != null ? map.get("endDate") : "") + "\",\n" +
					"  \"credentialUrl\": \"" + (map.get("credentialUrl") != null ? map.get("credentialUrl") : "") + "\n" +
 				"}")
				.header("Token", System.getenv("API_KEY"))
                .when()
                .post("/recipients/persons/{id}/registrations")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 201) {
					System.out.println("Description: Successful");
    
              if (response.jsonPath().get("id") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("id"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("reference") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("reference"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("reference").length(), lessThanOrEqualTo(100));
  
          }
    
              if (response.jsonPath().get("startDate") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("startDate"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("endDate") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("endDate"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("status") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("status"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("credentialUrl") != null) {  
                MatcherAssert.assertThat(response.jsonPath().getString("credentialUrl"), matchesPattern("^\w+:(\/?\/?)[^\s]+$")); 

                MatcherAssert.assertThat(response.jsonPath().get("credentialUrl"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("suspendedUntil") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("suspendedUntil"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("issuedAt") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("issuedAt"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("createdAt") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("createdAt"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("updatedAt") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("updatedAt"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 400) {
					System.out.println("Description: Bad Request");
    
              if (response.jsonPath().get("error") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("error"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("description") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("error") != null) {  
                MatcherAssert.assertThat(response.jsonPath().getString("error"), matchesPattern("^validation/.*$")); 

                MatcherAssert.assertThat(response.jsonPath().get("error"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("description") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("value") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("value"), instanceOf(undefined.class));  
          }
    
              if (response.jsonPath().get("field") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("field"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("schema_field") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("schema_field"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 401) {
					System.out.println("Description: Authentication Required");
    
              if (response.jsonPath().get("error") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("error"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("description") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("error") != null) {  
                MatcherAssert.assertThat(response.jsonPath().getString("error"), matchesPattern("^validation/.*$")); 

                MatcherAssert.assertThat(response.jsonPath().get("error"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("description") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("value") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("value"), instanceOf(undefined.class));  
          }
    
              if (response.jsonPath().get("field") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("field"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("schema_field") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("schema_field"), instanceOf(String.class));  
          }
				}
  
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
}
